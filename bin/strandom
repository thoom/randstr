#! /usr/bin/env ruby

require 'optparse'
require 'strandom'

type = :alnum
len  = 32
cust_vals = ''
cust_delimiter = ''

parser = OptionParser.new do |o|
  o.banner = 'Usage: strandom [options]'
  o.separator ""
  o.separator "Specific options:"

  o.on('--alnum  [length]', 'Characters a-z, A-Z, 0-9') do |length|
    type = :alnum
    len = length if length
  end

  o.on('--alpha  [length]', 'Characters a-z, A-Z') do |length|
    type = :alpha
    len = length if length
  end

  o.on('--custom values,[length],[delimiter]', Array, 'Provide a custom set of values to build the string') do |custom|
    values, length, delimiter = custom
    # puts "len #{length}\nvalues #{values}\ndelimiter #{delimiter}"

    type = :custom
    len = length if length
    cust_vals = values if values
    cust_delimiter = delimiter if delimiter
  end

  o.on('--lower  [length]', 'Characters a-z') do |length|
    type = :lower
    len = length if length
  end

  o.on('--lownum [length]', 'Characters a-z, 0-9') do |length|
    type = :lownum
    len = length if length
  end

  o.on('--hex    [length]', 'Characters a-f, 0-9') do |length|
    type = :hex
    len = length if length
  end

  o.on('--num    [length]', 'Characters 0-9') do |length|
    type = :num
    len = length if length
  end

  o.on('--uuid', 'UUID v4 string') do
    type = :uuid
  end

  o.on('--upper  [length]', 'Characters A-Z') do |length|
    type = :upper
    len = length if length
  end

  o.on('--upnum  [length]', 'Characters A-Z, 0-9') do |length|
    type = :upnum
    len = length if length
  end

  o.separator ""
  o.separator "Common options:"

  o.on_tail('--help', 'Shows this message') do
    puts o
    exit
  end

  o.on_tail('--version', 'Current version') do
    puts <<TXT

Thoom Strandom v.1.0
--------------------
e: zdp@thoomtech.com
w: https://github.com/thoom/randstr

TXT
    exit
  end
end

parser.parse! ARGV

len = len.to_i
if type == :hex
  result = Thoom::Strandom.hex(len: len)
elsif type == :uuid
  result = Thoom::Strandom.uuid()
elsif type == :custom
  cust = cust_vals.split(cust_delimiter)
  result = Thoom::Strandom.rand(len: len, type: type, cust: cust)
else
  result = Thoom::Strandom.rand(len: len, type: type)
end

puts result

